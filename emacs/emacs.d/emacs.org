#+TITLE: Brett Wilkins' Emacs Configuration
#+AUTHOR: Brett Wilkins
#+EMAIL: brett@brett.geek.nz
#+OPTIONS: toc:3 num:nil

* Preliminaries

** Acknowledgements
I've borrowed a lot of this setup from [[https://github.com/rlridenour/old-emacs.d/blob/master/emacs.org][Randy Ridenour]]
and [[https://www.johnborwick.com/2019/02/20/init-org-mode.html][John Borwick]].

** Installation
Welcome to my Emacs configuration, me! To install, put this file into
~/.emacs.d (or wherever else "user-emacs-directory" might be set to), along with a file called "init.el" containing the following:

#+begin_src emacs-lisp :tangle no
  (require 'org-install)
  (require 'ob-tangle)
  (org-babel-load-file (exdpand-file-name "emacs.org" user-emacs-directory))
#+end_src

** Package Manager

*** Package Manager / Initialise Package

Setup Melpa Stable, Melpa, Org and Elpa as available package repos

#+begin_src emacs-lisp :tangle yes
  (require 'package)

  (setq
   package-enable-at-startup nil
   package-archives
   '(("melpa-stable" . "http://stable.melpa.org/packages/")
     ("melpa" . "http://melpa.org/packages/")
     ("org"         . "http://orgmode.org/elpa/")
     ("gnu"         . "http://elpa.gnu.org/packages/")))

  (package-initialize)
#+end_src

*** Package Manager / Install and configure Use-Package

I use jwiegley's "use-package" tool for installing and setting up packages.

#+begin_src emacs-lisp :tangle yes
  ;; Bootstrap `use-package'
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-ensure t)

  ;; Automatically update packages
  (use-package auto-package-update
      :config
      (setq auto-package-update-delete-old-versions t)
      (setq auto-package-update-hide-results t)
      (auto-package-update-maybe))
#+end_src

** Variables

*** Variables / Inherit $PATH

Set the path variable to match the shell.

#+begin_src emacs-lisp :tangle yes
  (use-package exec-path-from-shell
      :config (exec-path-from-shell-initialize))
#+end_src

*** Variables / Org Home

I keep my org tree in dropbox, so I'm going to set up a couple of variables to be used later, telling org-mode where to go

#+begin_src emacs-lisp :tangle yes
  (setq
    --dropbox-dir (if (file-exists-p "~/Dropbox/")
      "~/Dropbox/"
      "~/Dropbox (Personal)/")
    --org-home (concat --dropbox-dir "org/"))
#+end_src

*** Variables / Fonts

Until I've figured out how Linux (particularly NixOS, but previously Manjaro) deals with adding fonts,
I've got different config here for MacOS from Linux. I've had a bunch of trouble getting Dank Mono to work
with FontConfig (despite having both OTF and TTF versions of it); also not sure how best to package it if I
can get it to work, given it's a paid font, I don't want to accidentally make it widely available to the internet.

#+begin_src emacs-lisp :tangle yes
  (if (eq system-type 'darwin)
      ;; If MacOS...
      (setq
      --code-font "Dank Mono-18"
      --pretty-font "Baskerville-16"
      )

      ;; Else...
      (setq
      --code-font "Source Code Pro-16"
      --pretty-font "Libre Baskerville-16"
      )
    )
#+end_src

** File Backups

#+begin_src emacs-lisp :tangle yes
  (setq --temporary-file-directory (concat user-emacs-directory "/tmp"))
  (setq --backup-directory (concat user-emacs-directory "/backup"))
  (if (not (file-exists-p --temporary-file-directory))
          (make-directory --temporary-file-directory t))
  (if (not (file-exists-p --backup-directory))
          (make-directory --backup-directory t))
  (setq backup-directory-alist `((,--backup-directory)))
  (setq make-backup-files nil               ; backup of a file the first time it is saved.
        backup-by-copying t               ; don't clobber symlinks
        version-control t                 ; version numbers for backup files
        delete-old-versions t             ; delete excess backup files silently
        delete-by-moving-to-trash t
        kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
        kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
        auto-save-default t               ; auto-save every buffer that visits a file
        auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
        auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
        create-lockfiles nil
        )
#+end_src


** Custom

Where custom-set-variables etc should be written to and loaded from

#+begin_src emacs-lisp :tangle yes
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src
* Package setup

** Persistent Scratch

I'm told this will be useful if I want to use scratch buffers more

#+begin_src emacs-lisp :tangle yes
  (use-package persistent-scratch
    :ensure t
    :config
    (persistent-scratch-setup-default))
#+end_src

** Evil Mode

#+begin_src emacs-lisp :tangle yes
  (use-package evil
    :ensure t
    ;:straight evil
    :config
    (evil-mode t)

    ;; Treat wrapped line scrolling as single lines
    (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
    ;; esc quits pretty much anything (like pending prompts in the minibuffer)
    (define-key evil-normal-state-map [escape] 'keyboard-quit)
    (define-key evil-visual-state-map [escape] 'keyboard-quit)
    (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
    ;; Enable smash escape (ie 'jk' and 'kj' quickly to exit insert mode)
    (define-key evil-insert-state-map "k" #'cofi/maybe-exit-kj)
    (evil-define-command cofi/maybe-exit-kj ()
      :repeat change
      (interactive)
      (let ((modified (buffer-modified-p)))
       (insert "k")
       (let ((evt (read-event (format "Insert %c to exit insert state" ?j)
                        nil 0.5)))
         (cond
          ((null evt) (message ""))
          ((and (integerp evt) (char-equal evt ?j))
           (delete-char -1)
           (set-buffer-modified-p modified)
           (push 'escape unread-command-events))
          (t (setq unread-command-events (append unread-command-events
                                       (list evt))))))))
     (define-key evil-insert-state-map "j" #'cofi/maybe-exit-jk)
     (evil-define-command cofi/maybe-exit-jk ()
       :repeat change
       (interactive)
       (let ((modified (buffer-modified-p)))
       (insert "j")
       (let ((evt (read-event (format "Insert %c to exit insert state" ?k)
                        nil 0.5)))
         (cond
          ((null evt) (message ""))
          ((and (integerp evt) (char-equal evt ?k))
           (delete-char -1)
           (set-buffer-modified-p modified)
           (push 'escape unread-command-events))
          (t (setq unread-command-events (append unread-command-events
                                       (list evt))))))))

     ;; Add some window movement
     (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
     (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
     (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
     (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)

     ;; Anything that requires evil-mode should be setup under here
     (use-package evil-leader
              :ensure t
              ;:straight evil-leader
                    :config
              (global-evil-leader-mode)
              (evil-leader/set-leader ";")
              (evil-leader/set-key
                "bb" 'switch-to-buffer
                "bp" 'previous-buffer
                "bn" 'next-buffer)))
#+end_src

** UI Setup

*** Dired
Now that evil-mode is setup, here's a vim-style shortcut for dired-mode

#+begin_src emacs-lisp :tangle yes
  (evil-leader/set-key "d" 'dired)
#+end_src

*** Indentation

Shortcut to re-indent the entire buffer
#+begin_src emacs-lisp :tangle yes
  (defun indent-buffer ()
    (interactive)
    (save-excursion
      (indent-region (point-min) (point-max) nil)))
  (evil-leader/set-key "r" 'indent-buffer)
#+end_src

*** Linum-Mode

Newer version of linum-mode (faster than linum?)

#+begin_src emacs-lisp :tangle yes
  (global-display-line-numbers-mode)
#+end_src

*** Auto-complete

**** Ivy
Apparently also using ivy for autocompletion?

#+begin_src emacs-lisp :tangle yes
      (use-package ivy
	:ensure t
	:config
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq enable-recursive-minibuffers t)
	(use-package projectile
	  :ensure t
	  :init
	  :defer 1
	  :config
	  (projectile-mode)
	  (evil-leader/set-key "pf" 'projectile-find-file)
	  (evil-leader/set-key "pg" 'projectile-grep)
	  (setq projectile-completion-system 'ivy)))
#+end_src

**** CompAny

#+begin_src emacs-lisp :tangle yes
  (use-package company
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-company-mode))
  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))
  (use-package company-lsp
    :defer t)
#+end_src

*** Theming

I first used spacemacs, and I quite liked the theme, just not the rest of the stuff that it brought with it.
So how about we just use the theme?

#+begin_src emacs-lisp :tangle yes
  (use-package spacemacs-theme
    :defer t
    :ensure t
    :init (load-theme 'spacemacs-dark t)
    )
#+end_src

*** Frame/Window sizing

On MacOS, I prefer to run this full-screen

#+begin_src emacs-lisp :tangle yes
  (if (eq system-type 'darwin)
    (setq default-frame-alist
         '((fullscreen . maximized) (fullscreen-restore . maximized))))
#+end_src

*** Fonts

Setup the fonts that we selected back in the [[Variables / Fonts][Variables / Fonts]] Section

#+begin_src emacs-lisp :tangle yes
  (add-to-list 'default-frame-alist `(font . ,--code-font))
  (set-face-attribute 'default nil :font --code-font)
  (set-face-attribute 'default t :font --code-font)
  (set-face-attribute 'variable-pitch nil :font --pretty-font)
  (set-face-attribute 'variable-pitch t :font --pretty-font)
#+end_src

** Magit Setup

The best git interface I've ever used, period.

#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :ensure t
    ;:straight magit
    :config
    (evil-leader/set-key "gs" 'magit-status))
#+end_src

** Org-Mode setup

#+begin_src emacs-lisp :tangle yes
  (use-package org
    :ensure org-plus-contrib
    ;:straight org-plus-contrib
    )

  (use-package org-journal
    :ensure t
    ;:straight org-journal
    :custom
    (org-journal-dir (concat --org-home "journal/"))
    (org-journal-date-format "%A, %d %B %Y")
    :config
    (evil-leader/set-key "jj" 'org-journal-new-entry)
    )

  (use-package org-roam
    :ensure t
    :hook (after-init . org-roam-mode)
    ;:straight (:host github :repo "org-roam/org-roam" :branch "master")
    :custom
    (org-roam-directory (concat --org-home "roam/"))

    :bind (:map org-roam-mode-map
  	      (("C-c n l" . org-roam)
  	       ("C-c n f" . org-roam-find-file)
  	       ("C-c n g" . org-roam-show-graph))
  	      :map org-mode-map
  	      (("C-c n i" . org-roam-insert)))
    :config

    (evil-leader/set-key "ar" 'org-roam)
    (evil-leader/set-key "af" 'org-roam-find-file)
    (evil-leader/set-key "aa" 'org-roam-insert)
    )
#+end_src

** Calendar

"I'll get around to this later"

#+begin_src emacs-lisp :tangle yes
  ; (use-package org-gcal
  ;   :after org
  ;   :straight org-gcal
  ;   :config
  ;   (setq org-gcal-client-id ""
  ;         org-gcal-client-secret ""
  ;         org-gcal-file-alist '(
  ; 			      ("brett@brett.geek.nz" . "~/org/brett@brett.geek.nz.org")
  ; 			      ("brett@cogent.co" . "~/org/brett@cogent.co.org")
  ; 			      )
  ;         org-gcal-header-alist '(("brett@brett.geek.nz" . "#+PROPERTY: TIMELINE_FACE \"pink\"\n"))
  ;         org-gcal-auto-archive nil
  ;         org-gcal-notify-p nil
  ; 	org-gcal-recurring-events-mode t
  ; 	)
  ;
  ;   (add-hook 'org-agenda-mode-hook 'org-gcal-fetch)
  ;   (add-hook 'org-capture-after-finalize-hook 'org-gcal-fetch))
#+end_src

** DirEnv

#+begin_src emacs-lisp :tangle yes
  (use-package direnv
    :init
    (add-hook 'prog-mode-hook #'direnv-update-environment)
    :config
    (direnv-mode))
#+end_src


** Language Server Protocol

#+begin_src emacs-lisp :tangle yes
  (use-package lsp-mode
    :after (direnv evil)
    :config
    ; Prefer LSP
    (setq lsp-prefer-flymake nil)
    ; LSP will watch all files in the project
    ; directory by default, so we eliminate some
    ; of the irrelevant ones here, most notable
    ; the .direnv folder which will contain *a lot*
    ; of Nix-y noise we don't want indexed.
    (setq lsp-file-watch-ignored '(
      "[/\\\\]\\.direnv$"
      ; SCM tools
      "[/\\\\]\\.git$"
      "[/\\\\]\\.hg$"
      "[/\\\\]\\.bzr$"
      "[/\\\\]_darcs$"
      "[/\\\\]\\.svn$"
      "[/\\\\]_FOSSIL_$"
      ; IDE tools
      "[/\\\\]\\.idea$"
      "[/\\\\]\\.ensime_cache$"
      "[/\\\\]\\.eunit$"
      "[/\\\\]node_modules$"
      "[/\\\\]\\.fslckout$"
      "[/\\\\]\\.tox$"
      "[/\\\\]\\.stack-work$"
      "[/\\\\]\\.bloop$"
      "[/\\\\]\\.metals$"
      "[/\\\\]target$"
      ; Autotools output
      "[/\\\\]\\.deps$"
      "[/\\\\]build-aux$"
      "[/\\\\]autom4te.cache$"
      "[/\\\\]\\.reference$"))
    )

#+end_src

** Ruby

#+begin_src emacs-lisp :tangle yes
  (setq lsp-solargraph-multi-root nil)
  ; (use-package enh-ruby-mode
  ;   :ensure t
  ;   ;:straight enh-ruby-mode
  ;   :config

  ;   (use-package rspec-mode
  ;     :ensure t
  ;     ;:straight rspec-mode
  ;     )

  ;   (use-package robe
  ;     :ensure t
  ;     ;:straight robe
  ;     )

  ;   (use-package ruby-end
  ;     :ensure t
  ;     ;:straight ruby-end
  ;     :defer 1)

  ;   (use-package rbenv
  ;     :ensure t
  ;     ;:straight rbenv
  ;     :config
  ;     (global-rbenv-mode))
  ;   (use-package inf-ruby
  ;     :ensure t
  ;     ;:straight inf-ruby
  ;     :config

  ;     (defun comint-goto-end-and-insert ()
  ;       (interactive)
  ;       (if (not (comint-after-pmark-p))
  ; 	  (progn (comint-goto-process-mark)
  ; 		 (evil-append-line nil))
  ; 	(evil-insert 1)))
  ;     (evil-define-key 'normal comint-mode-map "i" 'comint-goto-end-and-insert)
  ;     (evil-define-key 'normal inf-ruby-mode-map "i" 'comint-goto-end-and-insert)

  ;     (evil-define-key 'insert comint-mode-map
  ;       (kbd "<up>") 'comint-previous-input
  ;       (kbd "<down>") 'comint-next-input)))

  ; (add-hook 'enh-ruby-mode-hook 'robe-mode)
  ; (eval-after-load 'company
  ;   '(push 'company-robe company-backends))
  ; (add-hook 'enh-ruby-mode-hook 'inf-ruby-minor-mode)
  ; (add-hook 'compilation-filter-hook 'inf-ruby-auto-enter)
  ; (add-hook 'dired-mode-hook 'rspec-dired-mode)

  ; (setenv "CAPYBARA_INLINE_SCREENSHOT" "artifact")
#+end_src

** EditorConfig integration

#+begin_src emacs-lisp :tangle yes
  (use-package editorconfig
    :ensure t
    ;:straight editorconfig
    :config
    (editorconfig-mode 1))
#+end_src

** Markdown

#+begin_src emacs-lisp :tangle yes
  (use-package markdown-mode
    :ensure t
    ;:straight markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
  	 ("readme\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+end_src

** eBook reading

#+begin_src emacs-lisp :tangle yes
  (setq --reading-text-width 82)
  (defun --set-reading-margins ()
    "Disable line numbers and set margins to roughly centre text"
    (interactive)
    (display-line-numbers-mode 0)
    ;(set-window-margins nil 20 20)
    (let ((--new-margin (and --reading-text-width
                            (/ (max 0 (- (window-total-width)
                                         --reading-text-width))
                               2))))
      (setq left-margin-width --new-margin)
      (setq right-margin-width --new-margin)
      )
    )

  (use-package nov
    ;:straight nov
    :config
    (setq nov-text-width 80)
    (setq nov-variable-pitch t)
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

    (defun --nov-font-setup ()
      (face-remap-add-relative 'variable-pitch :family "Libre Baskerville"
                                             :height 1.0))
    (add-hook 'nov-mode-hook '--nov-font-setup)

    (defun --nov-margins ()
      (add-hook 'after-change-major-mode-hook '--set-reading-margins :append :local)
      ; I can't seem to get the following to work...
      ;(add-hook 'window-configuration-change-hook '--set-reading-margins :append :local)
      )
    (add-hook 'nov-mode-hook '--nov-margins)

    )

  (if (eq system-type 'darwin)
      (setenv "PKG_CONFIG_PATH" "/usr/local/Cellar/zlib/1.2.8/lib/pkgconfig:/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig")
    )
  (use-package pdf-tools
    ;:straight pdf-tools
    :magic ("%PDF" . pdf-view-mode)
    :config
    (pdf-tools-install :no-query))
#+end_src

